{"ast":null,"code":"var _jsxFileName = \"/home/ivansch/code/IvanSchlagheck/React/06 - Food Order Project/src/Store/CartProvider.js\",\n    _s = $RefreshSig$();\n\n//React Import\nimport { useReducer } from \"react\"; // Components Imports\n\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  //Add item in the cart logic\n  if (action.type === \"ADD\") {\n    //I update the new total amount\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //i save the indexes of the items in the cart\n\n    const existingCartItem = state.items[existingCartItemIndex]; // i save the existing item in the cart\n\n    let updatedItems;\n\n    if (existingCartItem) {\n      // if it exist, i update the amount\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      // if it doesnt exist, i create a new one\n      updatedItems = state.items.concat(action.item);\n    } // Remove item from the cart logic\n\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {//Update the cart\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/ivansch/code/IvanSchlagheck/React/06 - Food Order Project/src/Store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA;AACA,SAASA,UAAT,QAA2B,OAA3B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAErC;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA,UAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MADtD;AAGA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAsBJ,IAAI,IAAIA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACG,IAAP,CAAYK,EAAtD,CAA9B,CALyB,CAKgE;;AACzF,UAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAAzB,CANyB,CAMoC;;AAC7D,QAAII,YAAJ;;AAEA,QAAID,gBAAJ,EAAqB;AAAE;AACrB,YAAME,WAAW,GAAG,EAClB,GAAGF,gBADe;AAElBJ,QAAAA,MAAM,EAAEI,gBAAgB,CAACJ,MAAjB,GAA0BL,MAAM,CAACG,IAAP,CAAYE;AAF5B,OAApB;AAIAK,MAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,MAAAA,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC;AACD,KAPD,MAOO;AAAE;AACPD,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;AACD,KAlBwB,CAoBzB;;;AAEA,WAAO;AACLP,MAAAA,KAAK,EAAEc,YADF;AAELb,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AACD,MAAIF,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B,CAC5B;AAED;;AACD,SAAON,gBAAP;AACD,CAnCD;;AAuCA,MAAMkB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCvB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMsB,oBAAoB,GAAId,IAAD,IAAU;AACrCa,IAAAA,kBAAkB,CAAC;AAAEf,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMe,yBAAyB,GAAIV,EAAD,IAAQ;AACxCQ,IAAAA,kBAAkB,CAAC;AAAEf,MAAAA,IAAI,EAAE,QAAR;AAAkBO,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMW,WAAW,GAAG;AAClBvB,IAAAA,KAAK,EAAEmB,SAAS,CAACnB,KADC;AAElBC,IAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAFL;AAGlBuB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzBD;;GAAMT,Y;;KAAAA,Y;AA2BN,eAAeA,YAAf","sourcesContent":["//React Import\nimport { useReducer } from \"react\";\n// Components Imports\nimport CartContext from \"./cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\nconst cartReducer = (state, action) => {\n\n  //Add item in the cart logic\n  if (action.type === \"ADD\") {\n    //I update the new total amount\n    const updatedTotalAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //i save the indexes of the items in the cart\n    const existingCartItem = state.items[existingCartItemIndex]; // i save the existing item in the cart\n    let updatedItems;\n\n    if (existingCartItem){ // if it exist, i update the amount\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else { // if it doesnt exist, i create a new one\n      updatedItems = state.items.concat(action.item)\n    }\n\n    // Remove item from the cart logic\n    \n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount,\n    };\n  }\n  if (action.type === \"REMOVE\") {\n    //Update the cart\n    \n  }\n  return defaultCartState;\n};\n\n\n\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemToCartHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n\n  const removeItemFromCartHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n  };\n  return (\n    <CartContext.Provider value={cartContext}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"]},"metadata":{},"sourceType":"module"}